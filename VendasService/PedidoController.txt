using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using VendasService.Data;
using VendasService.Models;
using VendasService.Models.Dto;
using VendasService.Services;
using Microsoft.AspNetCore.Authorization;

namespace VendasService.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    [Authorize] // üîê Exige JWT em todos os endpoints
    public class PedidosController : ControllerBase
    {
        private readonly VendasContext _context;
        private readonly IRabbitMqProducerService _rabbitMqService;
        private readonly IEstoqueClientService _estoqueClient;
        private readonly ILogger<PedidosController> _logger;

        public PedidosController(
            VendasContext context,
            IRabbitMqProducerService rabbitMqService,
            IEstoqueClientService estoqueClient,
            ILogger<PedidosController> logger)
        {
            _context = context;
            _rabbitMqService = rabbitMqService;
            _estoqueClient = estoqueClient;
            _logger = logger;
        }

        // =======================
        // GET ALL (com limite)
        // =======================
        [HttpGet]
        public async Task<ActionResult<IEnumerable<Pedido>>> GetPedidos([FromQuery] int top = 10)
        {
            var pedidos = await _context.Pedidos
                .Include(p => p.Itens)
                .OrderByDescending(p => p.DataPedido)
                .Take(top)
                .ToListAsync();

            return Ok(pedidos);
        }

        // =======================
        // GET BY ID
        // =======================
        [HttpGet("{id:int}")]
        public async Task<ActionResult<Pedido>> GetPedido(int id)
        {
            var pedido = await _context.Pedidos
                .Include(p => p.Itens)
                .FirstOrDefaultAsync(p => p.Id == id);

            if (pedido == null)
                return NotFound(new { message = $"Pedido {id} n√£o encontrado." });

            return Ok(pedido);
        }

        // =======================
        // CREATE
        // =======================
        [HttpPost]
        public async Task<ActionResult<Pedido>> CreatePedido([FromBody] PedidoCreateDto pedidoDto)
        {
            if (pedidoDto == null || string.IsNullOrWhiteSpace(pedidoDto.ClienteNome))
                return BadRequest(new { message = "ClienteNome √© obrigat√≥rio." });

            if (pedidoDto.Itens == null || !pedidoDto.Itens.Any())
                return BadRequest(new { message = "√â necess√°rio informar ao menos 1 item no pedido." });

            var itens = new List<PedidoItem>();

            foreach (var itemDto in pedidoDto.Itens)
            {
                try
                {
                    var produto = await _estoqueClient.GetProdutoAsync(itemDto.ProdutoId);
                    if (produto == null)
                        return NotFound(new { message = $"Produto {itemDto.ProdutoId} n√£o encontrado no estoque." });

                    if (produto.Quantidade < itemDto.Quantidade)
                        return BadRequest(new { message = $"Estoque insuficiente para ProdutoId {itemDto.ProdutoId}. Dispon√≠vel: {produto.Quantidade}, solicitado: {itemDto.Quantidade}" });

                    itens.Add(new PedidoItem
                    {
                        ProdutoId = itemDto.ProdutoId,
                        Quantidade = itemDto.Quantidade,
                        ValorTotal = itemDto.Quantidade * produto.Preco
                    });
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, "Erro ao consultar produto {ProdutoId} no estoque", itemDto.ProdutoId);
                    return StatusCode(503, new { message = "Servi√ßo de estoque indispon√≠vel." });
                }
            }

            var pedido = new Pedido
            {
                ClienteNome = pedidoDto.ClienteNome,
                Itens = itens,
                DataPedido = DateTime.UtcNow
            };

            _context.Pedidos.Add(pedido);
            await _context.SaveChangesAsync();

            _logger.LogInformation("Pedido {PedidoId} criado com sucesso", pedido.Id);

            // Publica evento no RabbitMQ
            try
            {
                _rabbitMqService.EnviarPedido(new PedidoMessage
                {
                    PedidoId = pedido.Id,
                    Itens = pedido.Itens.Select(i => new PedidoItemMessage
                    {
                        ProdutoId = i.ProdutoId,
                        Quantidade = i.Quantidade
                    }).ToList()
                });
                _logger.LogInformation("Evento RabbitMQ enviado para pedido {PedidoId}", pedido.Id);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Falha ao enviar evento RabbitMQ para pedido {PedidoId}", pedido.Id);
            }

            var pedidoCompleto = await _context.Pedidos
                .Include(p => p.Itens)
                .FirstOrDefaultAsync(p => p.Id == pedido.Id);

            return CreatedAtAction(nameof(GetPedido), new { id = pedido.Id }, pedidoCompleto);
        }

        // =======================
        // UPDATE
        // =======================
        [HttpPut("{id:int}")]
        public async Task<IActionResult> UpdatePedido(int id, [FromBody] PedidoUpdateDto pedidoDto)
        {
            if (pedidoDto == null)
                return BadRequest(new { message = "Pedido inv√°lido." });

            var existente = await _context.Pedidos
                .Include(p => p.Itens)
                .FirstOrDefaultAsync(p => p.Id == id);

            if (existente == null)
                return NotFound(new { message = $"Pedido {id} n√£o encontrado." });

            existente.ClienteNome = pedidoDto.ClienteNome ?? existente.ClienteNome;
            existente.Itens.Clear();

            if (pedidoDto.Itens != null)
            {
                foreach (var itemDto in pedidoDto.Itens)
                {
                    try
                    {
                        var produto = await _estoqueClient.GetProdutoAsync(itemDto.ProdutoId);
                        if (produto == null)
                            return NotFound(new { message = $"Produto {itemDto.ProdutoId} n√£o encontrado no estoque." });

                        if (produto.Quantidade < itemDto.Quantidade)
                            return BadRequest(new { message = $"Estoque insuficiente para ProdutoId {itemDto.ProdutoId}. Dispon√≠vel: {produto.Quantidade}, solicitado: {itemDto.Quantidade}" });

                        existente.Itens.Add(new PedidoItem
                        {
                            ProdutoId = itemDto.ProdutoId,
                            Quantidade = itemDto.Quantidade,
                            ValorTotal = itemDto.Quantidade * produto.Preco
                        });
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError(ex, "Erro ao consultar produto {ProdutoId} no estoque", itemDto.ProdutoId);
                        return StatusCode(503, new { message = "Servi√ßo de estoque indispon√≠vel." });
                    }
                }
            }

            await _context.SaveChangesAsync();
            _logger.LogInformation("Pedido {PedidoId} atualizado com sucesso", id);

            return NoContent();
        }

        // =======================
        // DELETE
        // =======================
        [HttpDelete("{id:int}")]
        public async Task<IActionResult> DeletePedido(int id)
        {
            var pedido = await _context.Pedidos
                .Include(p => p.Itens)
                .FirstOrDefaultAsync(p => p.Id == id);

            if (pedido == null)
                return NotFound(new { message = $"Pedido {id} n√£o encontrado." });

            _context.Pedidos.Remove(pedido);
            await _context.SaveChangesAsync();

            try
            {
                _rabbitMqService.EnviarPedido(new PedidoMessage
                {
                    PedidoId = pedido.Id,
                    Itens = new List<PedidoItemMessage>() // Pedido exclu√≠do
                });
                _logger.LogInformation("Evento RabbitMQ enviado para exclus√£o do pedido {PedidoId}", pedido.Id);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Falha ao enviar evento RabbitMQ para exclus√£o do pedido {PedidoId}", pedido.Id);
            }

            _logger.LogInformation("Pedido {PedidoId} removido com sucesso", pedido.Id);
            return NoContent();
        }

        // =======================
        // REENVIAR PARA RABBIT
        // =======================
        [HttpPost("reenviar-rabbit/{id:int}")]
        public async Task<IActionResult> ReenviarPedidoRabbit(int id)
        {
            var pedido = await _context.Pedidos
                .Include(p => p.Itens)
                .FirstOrDefaultAsync(p => p.Id == id);

            if (pedido == null)
                return NotFound(new { message = $"Pedido {id} n√£o encontrado." });

            try
            {
                _rabbitMqService.EnviarPedido(new PedidoMessage
                {
                    PedidoId = pedido.Id,
                    Itens = pedido.Itens.Select(i => new PedidoItemMessage
                    {
                        ProdutoId = i.ProdutoId,
                        Quantidade = i.Quantidade
                    }).ToList()
                });

                _logger.LogInformation("Pedido {PedidoId} reenviado com sucesso para RabbitMQ", pedido.Id);
                return Ok(new { message = $"Pedido {pedido.Id} reenviado para RabbitMQ." });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Erro ao reenviar pedido {PedidoId} para RabbitMQ", pedido.Id);
                return StatusCode(500, new { message = "Erro ao reenviar pedido para RabbitMQ." });
            }
        }
    }
}